import os
import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    ConversationHandler,
    CallbackContext
)
from pyairtable import Table

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
MENU, CASH_FLOW_SELECT_PAGE, CASH_FLOW_SELECT_SHIFT, CASH_FLOW_SELECT_TYPE, CASH_FLOW_ENTER_AMOUNT = range(5)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Airtable
AIRTABLE_API_KEY = os.getenv('AIRTABLE_API_KEY')
AIRTABLE_BASE_ID = os.getenv('AIRTABLE_BASE_ID')

operators_table = Table(AIRTABLE_API_KEY, AIRTABLE_BASE_ID, 'Operators')
cash_table = Table(AIRTABLE_API_KEY, AIRTABLE_BASE_ID, 'Cash')
schedule_table = Table(AIRTABLE_API_KEY, AIRTABLE_BASE_ID, 'Schedule')

def create_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    keyboard = [
        [KeyboardButton("üí∞ –ó–∞–ø–∏—Å–∞—Ç—å –∫–∞—Å—Å—É")],
        [KeyboardButton("üìÖ –ì—Ä–∞—Ñ–∏–∫")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def start(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∞–ª–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
    user_id = str(update.effective_user.id)
    
    try:
        # –ò—â–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ TG ID
        operators = operators_table.all()
        operator = None
        
        for op in operators:
            if op['fields'].get('TG ID') == user_id:
                operator = op
                break
        
        if operator:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            context.user_data['operator_id'] = operator['fields'].get('ID')
            context.user_data['operator_name'] = operator['fields'].get('Name')
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            pages = {}
            if '–°—Ç—Ä–∞–Ω–∏—Ü–∞' in operator['fields']:
                for page_id in operator['fields']['–°—Ç—Ä–∞–Ω–∏—Ü–∞']:
                    page = cash_table.get(page_id)
                    if page and 'Name' in page['fields']:
                        pages[page['fields']['Name']] = page_id
            
            context.user_data['page_names'] = pages
            
            update.message.reply_text(
                f"üëã –ü—Ä–∏–≤–µ—Ç, {operator['fields'].get('Name')}!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=create_main_keyboard()
            )
            return MENU
        else:
            update.message.reply_text(
                "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –≤–∞—Å –Ω–µ —É–∑–Ω–∞—é. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ."
            )
            return ConversationHandler.END
            
    except Exception as e:
        logger.error(f"Error in start handler: {str(e)}")
        update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É."
        )
        return ConversationHandler.END

def handle_menu(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    text = update.message.text

    if text == "üí∞ –ó–∞–ø–∏—Å–∞—Ç—å –∫–∞—Å—Å—É":
        pages = context.user_data.get('page_names', {})
        if not pages:
            update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.",
                reply_markup=create_main_keyboard()
            )
            return MENU

        keyboard = [[KeyboardButton(page_name)] for page_name in pages.keys()]
        keyboard.append([KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        update.message.reply_text(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É:",
            reply_markup=reply_markup
        )
        return CASH_FLOW_SELECT_PAGE

    elif text == "üìÖ –ì—Ä–∞—Ñ–∏–∫":
        keyboard = [
            [KeyboardButton("üèñÔ∏è –í—ã—Ö–æ–¥–Ω–æ–π"), KeyboardButton("üîÑ –ó–∞–º–µ–Ω–∞")],
            [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        update.message.reply_text(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:",
            reply_markup=reply_markup
        )
        return MENU

    else:
        update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é",
            reply_markup=create_main_keyboard()
        )
        return MENU

def handle_cash_flow_page(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    text = update.message.text
    
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        update.message.reply_text(
            "üëâ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=create_main_keyboard()
        )
        return MENU
    
    pages = context.user_data.get('page_names', {})
    if text not in pages:
        update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ —Å–ø–∏—Å–∫–∞",
            reply_markup=ReplyKeyboardMarkup([[page] for page in pages.keys()], resize_keyboard=True)
        )
        return CASH_FLOW_SELECT_PAGE
    
    context.user_data['selected_page'] = pages[text]
    context.user_data['selected_page_name'] = text
    
    keyboard = [
        [KeyboardButton("üåÖ –£—Ç—Ä–æ"), KeyboardButton("‚òÄÔ∏è –î–µ–Ω—å"), KeyboardButton("üåô –í–µ—á–µ—Ä")],
        [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    update.message.reply_text(
        "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å–º–µ–Ω—É:",
        reply_markup=reply_markup
    )
    return CASH_FLOW_SELECT_SHIFT

def handle_cash_flow_shift(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–º–µ–Ω—ã"""
    text = update.message.text.replace('üåÖ ', '').replace('‚òÄÔ∏è ', '').replace('üåô ', '')
    
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        pages = context.user_data.get('page_names', {})
        keyboard = [[KeyboardButton(page_name)] for page_name in pages.keys()]
        keyboard.append([KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        update.message.reply_text(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É:",
            reply_markup=reply_markup
        )
        return CASH_FLOW_SELECT_PAGE
    
    if text not in ['–£—Ç—Ä–æ', '–î–µ–Ω—å', '–í–µ—á–µ—Ä']:
        update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–º–µ–Ω—É –∏–∑ —Å–ø–∏—Å–∫–∞",
            reply_markup=ReplyKeyboardMarkup([
                [KeyboardButton("üåÖ –£—Ç—Ä–æ"), KeyboardButton("‚òÄÔ∏è –î–µ–Ω—å"), KeyboardButton("üåô –í–µ—á–µ—Ä")],
                [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
            ], resize_keyboard=True)
        )
        return CASH_FLOW_SELECT_SHIFT
    
    context.user_data['selected_shift'] = text
    
    keyboard = [
        [KeyboardButton("üíµ –ö–∞—Å—Å–∞"), KeyboardButton("‚úàÔ∏è –î–æ–ª–µ—Ç"), KeyboardButton("‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç")],
        [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    update.message.reply_text(
        "üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:",
        reply_markup=reply_markup
    )
    return CASH_FLOW_SELECT_TYPE

def handle_cash_flow_type(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    text = update.message.text.replace('üíµ ', '').replace('‚úàÔ∏è ', '').replace('‚Ü©Ô∏è ', '')
    
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        keyboard = [
            [KeyboardButton("üåÖ –£—Ç—Ä–æ"), KeyboardButton("‚òÄÔ∏è –î–µ–Ω—å"), KeyboardButton("üåô –í–µ—á–µ—Ä")],
            [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        update.message.reply_text(
            "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å–º–µ–Ω—É:",
            reply_markup=reply_markup
        )
        return CASH_FLOW_SELECT_SHIFT
    
    if text not in ['–ö–∞—Å—Å–∞', '–î–æ–ª–µ—Ç', '–í–æ–∑–≤—Ä–∞—Ç']:
        update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞",
            reply_markup=ReplyKeyboardMarkup([
                [KeyboardButton("üíµ –ö–∞—Å—Å–∞"), KeyboardButton("‚úàÔ∏è –î–æ–ª–µ—Ç"), KeyboardButton("‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç")],
                [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
            ], resize_keyboard=True)
        )
        return CASH_FLOW_SELECT_TYPE
    
    context.user_data['selected_type'] = text
    
    keyboard = [[KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    update.message.reply_text(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:",
        reply_markup=reply_markup
    )
    return CASH_FLOW_ENTER_AMOUNT

def handle_cash_flow_amount(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã"""
    text = update.message.text
    
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        update.message.reply_text(
            "üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=create_main_keyboard()
        )
        return MENU
    
    try:
        amount = float(text)
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ
        record = {
            'Page': [context.user_data['selected_page']],
            'Operator': [context.user_data['operator_id']],
            'Shift': context.user_data['selected_shift'],
            'Type': context.user_data['selected_type'],
            'Amount': amount
        }
        
        cash_table.create(record)
        
        update.message.reply_text(
            f"‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {context.user_data['selected_page_name']}\n"
            f"‚è∞ –°–º–µ–Ω–∞: {context.user_data['selected_shift']}\n"
            f"üìù –¢–∏–ø: {context.user_data['selected_type']}\n"
            f"üí∞ –°—É–º–º–∞: {amount}",
            reply_markup=create_main_keyboard()
        )
        return MENU
        
    except ValueError as e:
        update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
        )
        return CASH_FLOW_ENTER_AMOUNT

def help_command(update: Update, context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /help"""
    help_text = """
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏

–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:
1. üí∞ –ö–∞—Å—Å–∞ - —É—á–µ—Ç –¥–≤–∏–∂–µ–Ω–∏—è –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
2. üìÖ –ì—Ä–∞—Ñ–∏–∫ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —Ä–∞–±–æ—Ç—ã
"""
    update.message.reply_text(help_text)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        updater = Updater(os.getenv('TELEGRAM_TOKEN'))
        dispatcher = updater.dispatcher

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        dispatcher.add_handler(CommandHandler('help', help_command))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', start)],
            states={
                MENU: [MessageHandler(Filters.text & ~Filters.command, handle_menu)],
                CASH_FLOW_SELECT_PAGE: [MessageHandler(Filters.text & ~Filters.command, handle_cash_flow_page)],
                CASH_FLOW_SELECT_SHIFT: [MessageHandler(Filters.text & ~Filters.command, handle_cash_flow_shift)],
                CASH_FLOW_SELECT_TYPE: [MessageHandler(Filters.text & ~Filters.command, handle_cash_flow_type)],
                CASH_FLOW_ENTER_AMOUNT: [MessageHandler(Filters.text & ~Filters.command, handle_cash_flow_amount)],
            },
            fallbacks=[CommandHandler('help', help_command)],
        )
        dispatcher.add_handler(conv_handler)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        updater.start_polling()
        updater.idle()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    main() 