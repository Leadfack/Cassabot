import os
import asyncio
import logging
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    ConversationHandler,
    CallbackContext,
    CallbackQueryHandler
)
from pyairtable import Api, Base, Table

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
(MENU, CASH_FLOW_SELECT_PAGE, CASH_FLOW_SELECT_SHIFT, CASH_FLOW_SELECT_TYPE, 
 CASH_FLOW_ENTER_AMOUNT, CASH_FLOW_ENTER_DATE, SCHEDULE_SELECT_DATE, 
 SCHEDULE_SELECT_SHIFT) = range(8)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è Airtable
AIRTABLE_API_KEY = os.getenv('AIRTABLE_API_KEY')
BASE_ID = "appPLEgqFVgDw0mmi"  # ID –≤–∞—à–µ–π –±–∞–∑—ã Managers
OPERATORS_TABLE = "–û–ø–µ—Ä–∞—Ç–æ—Ä—ã"
CASH_TABLE = "–ö–∞—Å—Å–∞"
SCHEDULE_TABLE = "–ì—Ä–∞—Ñ–∏–∫"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–º–µ–Ω
SHIFTS = ["00-08", "08-16", "16-00", "00-06", "06-12", "18-00"]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Airtable
airtable = Api(AIRTABLE_API_KEY)
base = Base(airtable, BASE_ID)
operators_table = base.table(OPERATORS_TABLE)
cash_table = base.table(CASH_TABLE)
schedule_table = base.table(SCHEDULE_TABLE)

def create_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    keyboard = [
        [KeyboardButton("üí∞ –ó–∞–ø–∏—Å–∞—Ç—å –∫–∞—Å—Å—É")],
        [KeyboardButton("üìÖ –ì—Ä–∞—Ñ–∏–∫")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def create_navigation_keyboard(include_back=True, include_main_menu=True):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    keyboard = []
    if include_back:
        keyboard.append([KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])
    if include_main_menu:
        keyboard.append([KeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_id = str(update.effective_user.id)
    
    try:
        # –ò—â–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ TG ID
        operators = operators_table.all()
        operator = None
        
        for op in operators:
            if op['fields'].get('TG ID') == user_id:
                operator = op
                break
        
        if operator:
            logger.info(f"Found operator: {operator}")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            context.user_data['operator_id'] = operator['fields'].get('ID')
            context.user_data['operator_name'] = operator['fields'].get('Name')
            context.user_data['manager'] = operator['fields'].get('–ú–µ–Ω–µ–¥–∂–µ—Ä', [None])[0] if operator['fields'].get('–ú–µ–Ω–µ–¥–∂–µ—Ä') else None
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            pages = {}
            if '–°—Ç—Ä–∞–Ω–∏—Ü–∞' in operator['fields']:
                for page_id in operator['fields']['–°—Ç—Ä–∞–Ω–∏—Ü–∞']:
                    try:
                        page = cash_table.get(page_id)
                        if page and 'Name' in page['fields']:
                            pages[page['fields']['Name']] = page_id
                    except Exception as e:
                        logger.error(f"Error fetching page {page_id}: {str(e)}")
            
            context.user_data['page_names'] = pages
            logger.info(f"Saved operator data: {context.user_data}")
            
            # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=create_main_keyboard()
            )
            return MENU
        else:
            logger.warning(f"Operator not found for TG ID: {user_id}")
            await update.message.reply_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –≤–∞—Å –Ω–µ —É–∑–Ω–∞—é. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ."
            )
            return ConversationHandler.END
            
    except Exception as e:
        logger.error(f"Error in start handler: {str(e)}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É."
        )
        return ConversationHandler.END

async def handle_menu(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    text = update.message.text
    logger.info(f"Menu selection: {text}")

    if text == "üí∞ –ó–∞–ø–∏—Å–∞—Ç—å –∫–∞—Å—Å—É":
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            operator_id = context.user_data.get('operator_id')
            if not operator_id:
                logger.error("Operator ID not found in context")
                await update.message.reply_text(
                    "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start",
                    reply_markup=create_main_keyboard()
                )
                return MENU

            # –ü–æ–ª—É—á–∞–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            operators = operators_table.all(formula=f"{{ID}}='{operator_id}'")
            if not operators:
                logger.error(f"Operator not found with ID: {operator_id}")
                await update.message.reply_text(
                    "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.",
                    reply_markup=create_main_keyboard()
                )
                return MENU

            operator = operators[0]
            pages = {}
            
            if '–°—Ç—Ä–∞–Ω–∏—Ü–∞' in operator['fields']:
                for page_id in operator['fields']['–°—Ç—Ä–∞–Ω–∏—Ü–∞']:
                    try:
                        page = cash_table.get(page_id)
                        if page and 'Name' in page['fields']:
                            pages[page['fields']['Name']] = page_id
                    except Exception as e:
                        logger.error(f"Error fetching page {page_id}: {str(e)}")

            if not pages:
                logger.error("No pages found for operator")
                await update.message.reply_text(
                    "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.",
                    reply_markup=create_main_keyboard()
                )
                return MENU

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context.user_data['page_names'] = pages
            logger.info(f"Available pages: {pages}")

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
            keyboard = [[KeyboardButton(page_name)] for page_name in pages.keys()]
            keyboard.extend([
                [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
                [KeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            ])
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É:",
                reply_markup=reply_markup
            )
            return CASH_FLOW_SELECT_PAGE

        except Exception as e:
            logger.error(f"Error in cash flow menu: {str(e)}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.",
                reply_markup=create_main_keyboard()
            )
            return MENU

    elif text == "üìÖ –ì—Ä–∞—Ñ–∏–∫":
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = [
            [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
            [KeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞ (1-31):",
            reply_markup=reply_markup
        )
        return SCHEDULE_SELECT_DATE

    else:
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
            reply_markup=create_main_keyboard()
        )
        return MENU

async def handle_cash_flow_page(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫–∞—Å—Å—ã"""
    text = update.message.text
    
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" or text == "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return await handle_navigation(update, context)
    
    context.user_data['selected_page'] = text
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Å–º–µ–Ω—ã
    keyboard = [[KeyboardButton(shift)] for shift in SHIFTS]
    keyboard.extend([
        [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
        [KeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ])
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–µ–Ω—É:",
        reply_markup=reply_markup
    )
    return CASH_FLOW_SELECT_SHIFT

async def handle_cash_flow_shift(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–º–µ–Ω—ã"""
    text = update.message.text
    
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" or text == "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return await handle_navigation(update, context)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–º–µ–Ω—É
    context.user_data['selected_shift'] = text
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
    keyboard = [
        [KeyboardButton("–ö–∞—Å—Å–∞")],
        [KeyboardButton("–î–æ–ª–µ—Ç")],
        [KeyboardButton("–í–æ–∑–≤—Ä–∞—Ç")],
        [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
        [KeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:",
        reply_markup=reply_markup
    )
    return CASH_FLOW_SELECT_TYPE

async def handle_cash_flow_type(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    text = update.message.text
    
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" or text == "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return await handle_navigation(update, context)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
    valid_types = ["–ö–∞—Å—Å–∞", "–î–æ–ª–µ—Ç", "–í–æ–∑–≤—Ä–∞—Ç"]
    
    if text not in valid_types:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=ReplyKeyboardMarkup([
                [KeyboardButton("–ö–∞—Å—Å–∞")],
                [KeyboardButton("–î–æ–ª–µ—Ç")],
                [KeyboardButton("–í–æ–∑–≤—Ä–∞—Ç")],
                [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
                [KeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            ], resize_keyboard=True)
        )
        return CASH_FLOW_SELECT_TYPE
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
    context.user_data['operation_type'] = text
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
    keyboard = [
        [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
        [KeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:",
        reply_markup=reply_markup
    )
    return CASH_FLOW_ENTER_AMOUNT

async def handle_cash_flow_amount(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã"""
    text = update.message.text
    
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" or text == "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return await handle_navigation(update, context)
    
    try:
        amount = float(text)
        context.user_data['amount'] = amount
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–°–µ–≥–æ–¥–Ω—è" –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
        keyboard = [
            [KeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è")],
            [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
            [KeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–°–µ–≥–æ–¥–Ω—è':",
            reply_markup=reply_markup
        )
        return CASH_FLOW_ENTER_DATE
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ."
        )
        return CASH_FLOW_ENTER_AMOUNT

async def handle_cash_flow_date(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã"""
    text = update.message.text
    
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" or text == "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return await handle_navigation(update, context)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É
        if text == "üìÖ –°–µ–≥–æ–¥–Ω—è":
            date = datetime.now().strftime("%Y-%m-%d")
        else:
            try:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ –î–î.–ú–ú.–ì–ì–ì–ì –≤ –ì–ì–ì–ì-–ú–ú-–î–î
                parsed_date = datetime.strptime(text, "%d.%m.%Y")
                date = parsed_date.strftime("%Y-%m-%d")
            except ValueError:
                await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–°–µ–≥–æ–¥–Ω—è'",
                    reply_markup=ReplyKeyboardMarkup([
                        [KeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è")],
                        [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
                        [KeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
                    ], resize_keyboard=True)
                )
                return CASH_FLOW_ENTER_DATE
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        operator_id = context.user_data.get('operator_id')
        operator_name = context.user_data.get('operator_name')
        page_name = context.user_data.get('selected_page')
        page_id = context.user_data.get('page_names', {}).get(page_name)
        shift = context.user_data.get('selected_shift')
        operation_type = context.user_data.get('operation_type')
        display_operation_type = context.user_data.get('display_operation_type')
        amount = float(context.user_data.get('amount', 0))

        logger.info(f"Context data before creating record:")
        logger.info(f"operator_id: {operator_id}")
        logger.info(f"operator_name: {operator_name}")
        logger.info(f"page_name: {page_name}")
        logger.info(f"page_id: {page_id}")
        logger.info(f"shift: {shift}")
        logger.info(f"operation_type: {operation_type}")
        logger.info(f"display_operation_type: {display_operation_type}")
        logger.info(f"amount: {amount}")
        logger.info(f"date: {date}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not all([operator_id, operator_name, page_id, shift, operation_type, amount, date]):
            missing_fields = []
            if not operator_id: missing_fields.append("ID –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
            if not operator_name: missing_fields.append("–ò–º—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
            if not page_id: missing_fields.append("ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            if not shift: missing_fields.append("–°–º–µ–Ω–∞")
            if not operation_type: missing_fields.append("–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏")
            if not amount: missing_fields.append("–°—É–º–º–∞")
            if not date: missing_fields.append("–î–∞—Ç–∞")
            
            logger.error(f"Missing required fields: {', '.join(missing_fields)}")
            await update.message.reply_text(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ: {', '.join(missing_fields)}. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=create_main_keyboard()
            )
            return MENU
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ Airtable
        record = {
            "ID": str(operator_id),
            "Name": operator_name,
            "–ö–∞—Å—Å–∞": amount,
            "–°—Ç—Ä–∞–Ω–∏—Ü–∞": [page_id],
            "–°–º–µ–Ω–∞": shift,
            "Date": date,
            "–¢–∏–ø": operation_type,
            "–ú–µ–Ω–µ–¥–∂–µ—Ä": [context.user_data['manager']] if context.user_data.get('manager') else None
        }
        
        logger.info(f"Creating record with data: {record}")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
            result = cash_table.create(record)
            logger.info(f"Record created successfully: {result}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            await update.message.reply_text(
                f"‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page_name}\n"
                f"‚è∞ –°–º–µ–Ω–∞: {shift}\n"
                f"üìù –¢–∏–ø: {operation_type}\n"
                f"üíµ –°—É–º–º–∞: {amount}\n"
                f"üìÖ –î–∞—Ç–∞: {text}",
                reply_markup=create_main_keyboard()
            )
            return MENU
        except Exception as e:
            logger.error(f"Error creating record in Airtable: {str(e)}")
            await update.message.reply_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.",
                reply_markup=create_main_keyboard()
            )
            return MENU
            
    except Exception as e:
        logger.error(f"Error in handle_cash_flow_date: {str(e)}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=create_main_keyboard()
        )
        return MENU

async def handle_schedule_date(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞"""
    text = update.message.text
    
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" or text == "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return await handle_navigation(update, context)
    
    try:
        day = int(text)
        if 1 <= day <= 31:
            context.user_data['selected_date'] = day
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
            keyboard = [
                [KeyboardButton("üèñÔ∏è –í—ã—Ö–æ–¥–Ω–æ–π")],
                [KeyboardButton("üîÑ –ó–∞–º–µ–Ω–∞")],
                [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
                [KeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–ª—è {day} —á–∏—Å–ª–∞:",
                reply_markup=reply_markup
            )
            return SCHEDULE_SELECT_SHIFT
        else:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 31",
                reply_markup=ReplyKeyboardMarkup([
                    [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
                    [KeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
                ], resize_keyboard=True)
            )
            return SCHEDULE_SELECT_DATE
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 31",
            reply_markup=ReplyKeyboardMarkup([
                [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
                [KeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
            ], resize_keyboard=True)
        )
        return SCHEDULE_SELECT_DATE

async def handle_schedule_shift(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞"""
    text = update.message.text
    
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" or text == "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return await handle_navigation(update, context)
    
    text = text.replace("üèñÔ∏è ", "").replace("üîÑ ", "")
    
    operator_id = context.user_data['operator_id']
    day = context.user_data['selected_date']
    
    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å –≤ –≥—Ä–∞—Ñ–∏–∫–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    schedule_records = schedule_table.all(
        formula=f"{{ID}}='{operator_id}'"
    )
    
    if schedule_records:
        record = schedule_records[0]
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ —Å –Ω–æ–º–µ—Ä–æ–º –¥–Ω—è
        schedule_table.update(record['id'], {
            str(day): text
        })
        
        await update.message.reply_text(
            f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\nüìÖ –î–µ–Ω—å {day}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å '{text}'",
            reply_markup=create_main_keyboard()
        )
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à—É –∑–∞–ø–∏—Å—å –≤ –≥—Ä–∞—Ñ–∏–∫–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.",
            reply_markup=create_main_keyboard()
        )
    
    return MENU

async def handle_navigation(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–ù–∞–∑–∞–¥/–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)"""
    text = update.message.text
    
    if text == "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=create_main_keyboard()
        )
        return MENU
    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥
        current_state = context.user_data.get('state', MENU)
        if current_state == CASH_FLOW_ENTER_DATE:
            return await handle_cash_flow_type(update, context)
        elif current_state == CASH_FLOW_ENTER_AMOUNT:
            return await handle_cash_flow_shift(update, context)
        elif current_state == CASH_FLOW_SELECT_TYPE:
            return await handle_cash_flow_page(update, context)
        elif current_state == CASH_FLOW_SELECT_SHIFT:
            return await handle_menu(update, context)
        elif current_state == CASH_FLOW_SELECT_PAGE:
            return await handle_menu(update, context)
        elif current_state == SCHEDULE_SELECT_SHIFT:
            return await handle_schedule_date(update, context)
        elif current_state == SCHEDULE_SELECT_DATE:
            return await handle_menu(update, context)
    
    return MENU

def help_command(update: Update, context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /help"""
    help_text = """
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏

–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:
1. –ö–∞—Å—Å–∞ - —É—á–µ—Ç –¥–≤–∏–∂–µ–Ω–∏—è –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
2. –ì—Ä–∞—Ñ–∏–∫ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —Ä–∞–±–æ—Ç—ã
"""
    update.message.reply_text(help_text)

def main():
    updater = Updater(os.getenv('TELEGRAM_TOKEN'))
    dispatcher = updater.dispatcher

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dispatcher.add_handler(CommandHandler('start', start))
    dispatcher.add_handler(CommandHandler('help', help_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(Filters.text & ~Filters.command, handle_menu)],
        states={
            CASH_FLOW_SELECT_PAGE: [MessageHandler(Filters.text & ~Filters.command, handle_cash_flow_page)],
            CASH_FLOW_SELECT_SHIFT: [MessageHandler(Filters.text & ~Filters.command, handle_cash_flow_shift)],
            CASH_FLOW_SELECT_TYPE: [MessageHandler(Filters.text & ~Filters.command, handle_cash_flow_type)],
            CASH_FLOW_ENTER_AMOUNT: [MessageHandler(Filters.text & ~Filters.command, handle_cash_flow_amount)],
            CASH_FLOW_ENTER_DATE: [MessageHandler(Filters.text & ~Filters.command, handle_cash_flow_date)],
            SCHEDULE_SELECT_DATE: [MessageHandler(Filters.text & ~Filters.command, handle_schedule_date)],
            SCHEDULE_SELECT_SHIFT: [MessageHandler(Filters.text & ~Filters.command, handle_schedule_shift)],
        },
        fallbacks=[],
    )
    dispatcher.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main() 